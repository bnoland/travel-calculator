
<form id="travel-calculator" novalidate>
  <div class="row mb-3">
    <label for="year" class="col-lg-4 col-form-label">Select year:</label>
    <div class="col-lg-8">
      <select id="year" class="form-select">
        <option value="">Select year</option>
        <option>2017</option>
        <option>2018</option>
      </select>
      <div class="invalid-feedback">Please select a year.</div>
    </div>
  </div>
  <div class="row mb-3">
    <label for="county" class="col-lg-4 col-form-label">Select county:</label>
    <div class="col-lg-8">
      <select id="county" class="form-select">
        <option value="">Select county</option>
        <option>Mercer</option>
        <option>Middlesex</option>
      </select>
      <div class="invalid-feedback">Please select a county.</div>
    </div>
  </div>
  <div class="row mb-3">
    <label for="facility-type" class="col-lg-4 col-form-label">Select facility type:</label>
    <div class="col-lg-8">
      <select id="facility-type" class="form-select">
        <option value="">Select facility type</option>
        <option>Urban interstate freeway/expressway</option>
        <option>Urban principal arterial</option>
      </select>
      <div class="invalid-feedback">Please select a facility type.</div>
    </div>
  </div>
  <div class="row mb-3">
    <label for="lane-miles" class="col-lg-4 col-form-label">Input total lane miles added:</label>
    <div class="col-lg-8">
      <div class="input-group">
        <input id="lane-miles" type="text" class="form-control" />
        <span class="input-group-text">miles</span>
        <div class="invalid-feedback">Please provide a non-negative value for lane miles.</div>
      </div>
    </div>
  </div>
  <div class="d-flex justify-content-center mt-4">
    <button type="submit" class="btn btn-primary">Calculate Induced Travel</button>
  </div>
</form>

<div class="modal fade" id="results-modal" tabindex="-1" aria-labelledby="results-model-label" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="results-model-label">Results</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <span id="miles-added"></span>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
  // See: https://stackoverflow.com/questions/68216663/bootstrap-5-popover-error-cannot-find-name-bootstrap
  declare var bootstrap: any;

  import Papa from "papaparse";

  const yearEl = document.getElementById("year") as HTMLInputElement;
  const facilityTypeEl = document.getElementById("facility-type") as HTMLInputElement;
  const countyEl = document.getElementById("county") as HTMLInputElement;
  const laneMilesEl = document.getElementById("lane-miles") as HTMLInputElement;
  const travelCalcEl = document.getElementById("travel-calculator") as HTMLFormElement;

  function getInvalidInputs() {
    const elements = [];

    if (!yearEl.value) elements.push(yearEl);
    if (!facilityTypeEl.value) elements.push(facilityTypeEl);
    if (!countyEl.value) elements.push(countyEl);

    const miles = parseFloat(laneMilesEl.value);
    if (isNaN(miles) || miles < 0) elements.push(laneMilesEl);

    return elements;
  }

  const invalidClass = "is-invalid";

  function markInputsAsValid() {
    yearEl.classList.remove(invalidClass);
    facilityTypeEl.classList.remove(invalidClass);
    countyEl.classList.remove(invalidClass);
    laneMilesEl.classList.remove(invalidClass);
  }

  interface DataEntry {
    county: string;
    year: number;
    facilityType: string;
    vmt: number;
    laneMiles: number;
  }

  function readData() {
    return new Promise<DataEntry[]>((resolve) => {
      Papa.parse("/data/data.csv", {
        download: true,
        header: true,
        dynamicTyping: true,
        complete: function (results) {
          resolve(results.data as DataEntry[]);
        },
      });
    });
  }

  const data = await readData();

  travelCalcEl.addEventListener("submit", (event) => {
    event.preventDefault();

    markInputsAsValid();

    const invalidInputs = getInvalidInputs();
    for (const input of invalidInputs)
      input.classList.add(invalidClass);

    if (invalidInputs.length > 0) return;

    const year = parseInt(yearEl.value);
    const facilityType = facilityTypeEl.value;
    const county = countyEl.value;
    const newLaneMiles = parseFloat(laneMilesEl.value);

    const { vmt, laneMiles } = data.filter((row) => (
      row.year === year &&
      row.facilityType === facilityType &&
      row.county === county
    ))[0];

    const modal = new bootstrap.Modal('#results-modal');
    modal.show();

    // XXX: More calculations + better formatting.
    const milesAddedEl = document.getElementById("miles-added")!;
    milesAddedEl.innerText = String(newLaneMiles / laneMiles * vmt * 1.0);
  });
</script>
